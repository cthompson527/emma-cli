// Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateBoilerplate {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Boilerplate {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: String!
  repository: String!
  name: String!
  description: String!
  branch: String!
  path: String!
}

type BoilerplateConnection {
  pageInfo: PageInfo!
  edges: [BoilerplateEdge]!
  aggregate: AggregateBoilerplate!
}

input BoilerplateCreateInput {
  owner: String!
  repository: String!
  name: String!
  description: String!
  branch: String!
  path: String!
}

type BoilerplateEdge {
  node: Boilerplate!
  cursor: String!
}

enum BoilerplateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  owner_ASC
  owner_DESC
  repository_ASC
  repository_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  branch_ASC
  branch_DESC
  path_ASC
  path_DESC
}

type BoilerplatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: String!
  repository: String!
  name: String!
  description: String!
  branch: String!
  path: String!
}

type BoilerplateSubscriptionPayload {
  mutation: MutationType!
  node: Boilerplate
  updatedFields: [String!]
  previousValues: BoilerplatePreviousValues
}

input BoilerplateSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BoilerplateWhereInput
  AND: [BoilerplateSubscriptionWhereInput!]
  OR: [BoilerplateSubscriptionWhereInput!]
  NOT: [BoilerplateSubscriptionWhereInput!]
}

input BoilerplateUpdateInput {
  owner: String
  repository: String
  name: String
  description: String
  branch: String
  path: String
}

input BoilerplateUpdateManyMutationInput {
  owner: String
  repository: String
  name: String
  description: String
  branch: String
  path: String
}

input BoilerplateWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  owner: String
  owner_not: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_gt: String
  owner_gte: String
  owner_contains: String
  owner_not_contains: String
  owner_starts_with: String
  owner_not_starts_with: String
  owner_ends_with: String
  owner_not_ends_with: String
  repository: String
  repository_not: String
  repository_in: [String!]
  repository_not_in: [String!]
  repository_lt: String
  repository_lte: String
  repository_gt: String
  repository_gte: String
  repository_contains: String
  repository_not_contains: String
  repository_starts_with: String
  repository_not_starts_with: String
  repository_ends_with: String
  repository_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  branch: String
  branch_not: String
  branch_in: [String!]
  branch_not_in: [String!]
  branch_lt: String
  branch_lte: String
  branch_gt: String
  branch_gte: String
  branch_contains: String
  branch_not_contains: String
  branch_starts_with: String
  branch_not_starts_with: String
  branch_ends_with: String
  branch_not_ends_with: String
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  AND: [BoilerplateWhereInput!]
  OR: [BoilerplateWhereInput!]
  NOT: [BoilerplateWhereInput!]
}

input BoilerplateWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

scalar Long

type Mutation {
  createBoilerplate(data: BoilerplateCreateInput!): Boilerplate!
  updateBoilerplate(data: BoilerplateUpdateInput!, where: BoilerplateWhereUniqueInput!): Boilerplate
  updateManyBoilerplates(data: BoilerplateUpdateManyMutationInput!, where: BoilerplateWhereInput): BatchPayload!
  upsertBoilerplate(where: BoilerplateWhereUniqueInput!, create: BoilerplateCreateInput!, update: BoilerplateUpdateInput!): Boilerplate!
  deleteBoilerplate(where: BoilerplateWhereUniqueInput!): Boilerplate
  deleteManyBoilerplates(where: BoilerplateWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  boilerplate(where: BoilerplateWhereUniqueInput!): Boilerplate
  boilerplates(where: BoilerplateWhereInput, orderBy: BoilerplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Boilerplate]!
  boilerplatesConnection(where: BoilerplateWhereInput, orderBy: BoilerplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BoilerplateConnection!
  node(id: ID!): Node
}

type Subscription {
  boilerplate(where: BoilerplateSubscriptionWhereInput): BoilerplateSubscriptionPayload
}
`
