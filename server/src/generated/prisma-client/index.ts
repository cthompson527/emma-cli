// Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from 'graphql'
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model,
} from 'prisma-client-lib'
import { typeDefs } from './prisma-schema'

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U]

export interface Exists {
  boilerplate: (where?: BoilerplateWhereInput) => Promise<boolean>
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>
}

export interface Prisma {
  $exists: Exists
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any },
  ) => Promise<T>

  /**
   * Queries
   */

  boilerplate: (where: BoilerplateWhereUniqueInput) => BoilerplatePromise
  boilerplates: (
    args?: {
      where?: BoilerplateWhereInput
      orderBy?: BoilerplateOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => FragmentableArray<Boilerplate>
  boilerplatesConnection: (
    args?: {
      where?: BoilerplateWhereInput
      orderBy?: BoilerplateOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => BoilerplateConnectionPromise
  node: (args: { id: ID_Output }) => Node

  /**
   * Mutations
   */

  createBoilerplate: (data: BoilerplateCreateInput) => BoilerplatePromise
  updateBoilerplate: (
    args: { data: BoilerplateUpdateInput; where: BoilerplateWhereUniqueInput },
  ) => BoilerplatePromise
  updateManyBoilerplates: (
    args: {
      data: BoilerplateUpdateManyMutationInput
      where?: BoilerplateWhereInput
    },
  ) => BatchPayloadPromise
  upsertBoilerplate: (
    args: {
      where: BoilerplateWhereUniqueInput
      create: BoilerplateCreateInput
      update: BoilerplateUpdateInput
    },
  ) => BoilerplatePromise
  deleteBoilerplate: (where: BoilerplateWhereUniqueInput) => BoilerplatePromise
  deleteManyBoilerplates: (where?: BoilerplateWhereInput) => BatchPayloadPromise

  /**
   * Subscriptions
   */

  $subscribe: Subscription
}

export interface Subscription {
  boilerplate: (
    where?: BoilerplateSubscriptionWhereInput,
  ) => BoilerplateSubscriptionPayloadSubscription
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T
}

/**
 * Types
 */

export type BoilerplateOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'owner_ASC'
  | 'owner_DESC'
  | 'repository_ASC'
  | 'repository_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'branch_ASC'
  | 'branch_DESC'
  | 'path_ASC'
  | 'path_DESC'

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED'

export type BoilerplateWhereUniqueInput = AtLeastOne<{
  id: ID_Input
  name?: String
}>

export interface BoilerplateWhereInput {
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTimeInput
  createdAt_not?: DateTimeInput
  createdAt_in?: DateTimeInput[] | DateTimeInput
  createdAt_not_in?: DateTimeInput[] | DateTimeInput
  createdAt_lt?: DateTimeInput
  createdAt_lte?: DateTimeInput
  createdAt_gt?: DateTimeInput
  createdAt_gte?: DateTimeInput
  updatedAt?: DateTimeInput
  updatedAt_not?: DateTimeInput
  updatedAt_in?: DateTimeInput[] | DateTimeInput
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput
  updatedAt_lt?: DateTimeInput
  updatedAt_lte?: DateTimeInput
  updatedAt_gt?: DateTimeInput
  updatedAt_gte?: DateTimeInput
  owner?: String
  owner_not?: String
  owner_in?: String[] | String
  owner_not_in?: String[] | String
  owner_lt?: String
  owner_lte?: String
  owner_gt?: String
  owner_gte?: String
  owner_contains?: String
  owner_not_contains?: String
  owner_starts_with?: String
  owner_not_starts_with?: String
  owner_ends_with?: String
  owner_not_ends_with?: String
  repository?: String
  repository_not?: String
  repository_in?: String[] | String
  repository_not_in?: String[] | String
  repository_lt?: String
  repository_lte?: String
  repository_gt?: String
  repository_gte?: String
  repository_contains?: String
  repository_not_contains?: String
  repository_starts_with?: String
  repository_not_starts_with?: String
  repository_ends_with?: String
  repository_not_ends_with?: String
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  branch?: String
  branch_not?: String
  branch_in?: String[] | String
  branch_not_in?: String[] | String
  branch_lt?: String
  branch_lte?: String
  branch_gt?: String
  branch_gte?: String
  branch_contains?: String
  branch_not_contains?: String
  branch_starts_with?: String
  branch_not_starts_with?: String
  branch_ends_with?: String
  branch_not_ends_with?: String
  path?: String
  path_not?: String
  path_in?: String[] | String
  path_not_in?: String[] | String
  path_lt?: String
  path_lte?: String
  path_gt?: String
  path_gte?: String
  path_contains?: String
  path_not_contains?: String
  path_starts_with?: String
  path_not_starts_with?: String
  path_ends_with?: String
  path_not_ends_with?: String
  AND?: BoilerplateWhereInput[] | BoilerplateWhereInput
  OR?: BoilerplateWhereInput[] | BoilerplateWhereInput
  NOT?: BoilerplateWhereInput[] | BoilerplateWhereInput
}

export interface BoilerplateCreateInput {
  owner: String
  repository: String
  name: String
  description: String
  branch: String
  path: String
}

export interface BoilerplateUpdateInput {
  owner?: String
  repository?: String
  name?: String
  description?: String
  branch?: String
  path?: String
}

export interface BoilerplateUpdateManyMutationInput {
  owner?: String
  repository?: String
  name?: String
  description?: String
  branch?: String
  path?: String
}

export interface BoilerplateSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: BoilerplateWhereInput
  AND?: BoilerplateSubscriptionWhereInput[] | BoilerplateSubscriptionWhereInput
  OR?: BoilerplateSubscriptionWhereInput[] | BoilerplateSubscriptionWhereInput
  NOT?: BoilerplateSubscriptionWhereInput[] | BoilerplateSubscriptionWhereInput
}

export interface NodeNode {
  id: ID_Output
}

export interface Boilerplate {
  id: ID_Output
  createdAt: DateTimeOutput
  updatedAt: DateTimeOutput
  owner: String
  repository: String
  name: String
  description: String
  branch: String
  path: String
}

export interface BoilerplatePromise extends Promise<Boilerplate>, Fragmentable {
  id: () => Promise<ID_Output>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  owner: () => Promise<String>
  repository: () => Promise<String>
  name: () => Promise<String>
  description: () => Promise<String>
  branch: () => Promise<String>
  path: () => Promise<String>
}

export interface BoilerplateSubscription
  extends Promise<AsyncIterator<Boilerplate>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  owner: () => Promise<AsyncIterator<String>>
  repository: () => Promise<AsyncIterator<String>>
  name: () => Promise<AsyncIterator<String>>
  description: () => Promise<AsyncIterator<String>>
  branch: () => Promise<AsyncIterator<String>>
  path: () => Promise<AsyncIterator<String>>
}

export interface BoilerplateConnection {
  pageInfo: PageInfo
  edges: BoilerplateEdge[]
}

export interface BoilerplateConnectionPromise
  extends Promise<BoilerplateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T
  edges: <T = FragmentableArray<BoilerplateEdge>>() => T
  aggregate: <T = AggregateBoilerplatePromise>() => T
}

export interface BoilerplateConnectionSubscription
  extends Promise<AsyncIterator<BoilerplateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<BoilerplateEdgeSubscription>>>() => T
  aggregate: <T = AggregateBoilerplateSubscription>() => T
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>
  hasPreviousPage: () => Promise<Boolean>
  startCursor: () => Promise<String>
  endCursor: () => Promise<String>
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>
  startCursor: () => Promise<AsyncIterator<String>>
  endCursor: () => Promise<AsyncIterator<String>>
}

export interface BoilerplateEdge {
  node: Boilerplate
  cursor: String
}

export interface BoilerplateEdgePromise
  extends Promise<BoilerplateEdge>,
    Fragmentable {
  node: <T = BoilerplatePromise>() => T
  cursor: () => Promise<String>
}

export interface BoilerplateEdgeSubscription
  extends Promise<AsyncIterator<BoilerplateEdge>>,
    Fragmentable {
  node: <T = BoilerplateSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface AggregateBoilerplate {
  count: Int
}

export interface AggregateBoilerplatePromise
  extends Promise<AggregateBoilerplate>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateBoilerplateSubscription
  extends Promise<AsyncIterator<AggregateBoilerplate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface BatchPayload {
  count: Long
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>
}

export interface BoilerplateSubscriptionPayload {
  mutation: MutationType
  node: Boilerplate
  updatedFields: String[]
  previousValues: BoilerplatePreviousValues
}

export interface BoilerplateSubscriptionPayloadPromise
  extends Promise<BoilerplateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = BoilerplatePromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = BoilerplatePreviousValuesPromise>() => T
}

export interface BoilerplateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BoilerplateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = BoilerplateSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = BoilerplatePreviousValuesSubscription>() => T
}

export interface BoilerplatePreviousValues {
  id: ID_Output
  createdAt: DateTimeOutput
  updatedAt: DateTimeOutput
  owner: String
  repository: String
  name: String
  description: String
  branch: String
  path: String
}

export interface BoilerplatePreviousValuesPromise
  extends Promise<BoilerplatePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  createdAt: () => Promise<DateTimeOutput>
  updatedAt: () => Promise<DateTimeOutput>
  owner: () => Promise<String>
  repository: () => Promise<String>
  name: () => Promise<String>
  description: () => Promise<String>
  branch: () => Promise<String>
  path: () => Promise<String>
}

export interface BoilerplatePreviousValuesSubscription
  extends Promise<AsyncIterator<BoilerplatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>
  owner: () => Promise<AsyncIterator<String>>
  repository: () => Promise<AsyncIterator<String>>
  name: () => Promise<AsyncIterator<String>>
  description: () => Promise<AsyncIterator<String>>
  branch: () => Promise<AsyncIterator<String>>
  path: () => Promise<AsyncIterator<String>>
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

export type Long = string

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: 'Boilerplate',
    embedded: false,
  },
]

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://emma-56cd6be5c8.herokuapp.com/emma-boilerplates/dev`,
})
export const prisma = new Prisma()
